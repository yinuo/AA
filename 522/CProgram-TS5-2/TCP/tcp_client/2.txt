/* server_tcp.c */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define DEFAULT_PORT 5050
int main(int argc, char** argv)
{
 main(int argc, char** argv)
    int sPort = DEFAULT_PORT;

    int sListen = 0;
T_PORT;

    int sAccept = 0;
T_PORT;

    unsigned int sLen = 0;
;

    int sSend = 0;
n = 0;
;

    struct sockaddr_in ser;


    struct sockaddr_in cli;


    char sbuf[1024] ={0};



    FILE *file; 
] ={0};



    file = fopen("tcp_server.c", "r");
    if(!file){
("tcp_server.c", "r");
    printf("faile to open\n");
 "r");
} 
printf("faile to open\n");
 "r");


printf("faile to open\n");
 "r");


printf("faile to open\n");
 "r");
/*   if (!feof(file)) {
\n");
 "r");
	fgets(sbuf,sizeof(sbuf),file);
"r");
	//}*/
buf,sizeof(sbuf),file);
"r");
    

buf,sizeof(sbuf),file);
"r");
    printf("Server waiting...\n");
);
   
rintf("Server waiting...\n");
);
    sListen = socket(AF_INET, SOCK_STREAM, 0);
    if(sListen < 0)
AF_INET, SOCK_STREAM, 0);
    {
sListen < 0)
AF_INET, SOCK_STREAM, 0);
        printf("socket() failure!\n");
M, 0);
        return -1;
et() failure!\n");
M, 0);
    }
 return -1;
et() failure!\n");
M, 0);
   

 return -1;
et() failure!\n");
M, 0);
    ser.sin_family = AF_INET;
e!\n");
M, 0);
    ser.sin_port = htons(sPort);
n");
M, 0);
    ser.sin_addr.s_addr = htonl(INADDR_ANY);

   
er.sin_addr.s_addr = htonl(INADDR_ANY);

    if(bind(sListen, (struct sockaddr*)&ser, sizeof(ser)) < 0)
    {
bind(sListen, (struct sockaddr*)&ser, sizeof(ser)) < 0)
        printf("bind() failure!\n");       
sizeof(ser)) < 0)
        return -1;
() failure!\n");       
sizeof(ser)) < 0)
    }
 return -1;
() failure!\n");       
sizeof(ser)) < 0)
   

 return -1;
() failure!\n");       
sizeof(ser)) < 0)
    if(listen(sListen, 5) < 0)
n");       
sizeof(ser)) < 0)
    {
listen(sListen, 5) < 0)
n");       
sizeof(ser)) < 0)
        printf("listen() failure!\n");        
eof(ser)) < 0)
        return -1;
en() failure!\n");        
eof(ser)) < 0)
    }
 return -1;
en() failure!\n");        
eof(ser)) < 0)
   

 return -1;
en() failure!\n");        
eof(ser)) < 0)
    sLen = sizeof(cli);
failure!\n");        
eof(ser)) < 0)

  sLen = sizeof(cli);
failure!\n");        
eof(ser)) < 0)
    while(1)
eof(cli);
failure!\n");        
eof(ser)) < 0)
    {
le(1)
eof(cli);
failure!\n");        
eof(ser)) < 0)
	/*if (fgets(sbuf, sizeof(sbuf), file) == NULL) 
f(ser)) < 0)
	    break;
sbuf, sizeof(sbuf), file) == NULL) 
f(ser)) < 0)
        else*/
f, sizeof(sbuf), file) == NULL) 
f(ser)) < 0)
	if(!feof(file))
 sizeof(sbuf), file) == NULL) 
f(ser)) < 0)
		fgets(sbuf,sizeof(sbuf),file);
ile) == NULL) 
f(ser)) < 0)
	else 
sbuf,sizeof(sbuf),file);
ile) == NULL) 
f(ser)) < 0)
		return 0;
sizeof(sbuf),file);
ile) == NULL) 
f(ser)) < 0)
        sAccept = accept(sListen, (struct sockaddr*)&cli, (unsigned int*)&sLen);
        if(sAccept < 0)
sListen, (struct sockaddr*)&cli, (unsigned int*)&sLen);
        {
sAccept < 0)
sListen, (struct sockaddr*)&cli, (unsigned int*)&sLen);
            printf("accept() failure!\n");             
 (unsigned int*)&sLen);
            break;
accept() failure!\n");             
 (unsigned int*)&sLen);
        }
 break;
accept() failure!\n");             
 (unsigned int*)&sLen);
       

 break;
accept() failure!\n");             
 (unsigned int*)&sLen);
        printf("accept() client IP: [%s]\n", (char*)inet_ntoa(cli.sin_addr));
;
        printf("accept() client PORT: [%d]\n", ntohs(cli.sin_port));
addr));
;
       
rintf("accept() client PORT: [%d]\n", ntohs(cli.sin_port));
addr));
;
        sSend = send(sAccept, sbuf, strlen (sbuf), 0);
.sin_port));
addr));
;
       
Send = send(sAccept, sbuf, strlen (sbuf), 0);
.sin_port));
addr));
;
        if((sSend < 0)||(sSend == 0))
len (sbuf), 0);
.sin_port));
addr));
;
        {
(sSend < 0)||(sSend == 0))
len (sbuf), 0);
.sin_port));
addr));
;
            printf("send() failure!\n");
 (sbuf), 0);
.sin_port));
addr));
;
            break;
send() failure!\n");
 (sbuf), 0);
.sin_port));
addr));
;
        }
 break;
send() failure!\n");
 (sbuf), 0);
.sin_port));
addr));
;
        else
eak;
send() failure!\n");
 (sbuf), 0);
.sin_port));
addr));
;
        {
e
eak;
send() failure!\n");
 (sbuf), 0);
.sin_port));
addr));
;
            printf("send() byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;
        }
 printf("send() byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;
        close(sAccept);
) byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;
    }
 close(sAccept);
) byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;
    close(sListen);
);
) byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;
   
lose(sListen);
);
) byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;
    return 0;
en);
);
) byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;
}
 return 0;
en);
);
) byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;


 return 0;
en);
);
) byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;


 return 0;
en);
);
) byte: [%d]\n", sSend);
0);
.sin_port));
addr));
;
